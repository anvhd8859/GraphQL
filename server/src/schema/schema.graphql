type User {
    id: ID!
    name: String!
    username: String!
    age: Int!
    nationality: Nationality!
    friends: [User]
    favoriteMovies: [Movie]
}

type Movie {
    id: ID!
    name: String!
    yearOfPublic: Int!
    isInTheater: Boolean!
}

type Query {
    users: UsersResult
    user(id: ID!): User!

    movies:[Movie!]!
    movie(name: String!): Movie!
}

input CreateUserInput {
    name: String!
    username: String!
    age: Int!
    nationality: Nationality = BRAZIL
}

input UpdateUserInput {
    id: ID!
    newUsername: String!
}

type Mutation {
    createUser(input: CreateUserInput!): User
    updateUsername(input: UpdateUserInput!): User
    deleteUser(id: ID!): User
}

enum Nationality {
    CANADA
    BRAZIL
    INDIA
    ENGLAND
    GERMANY
    CHILE
    UNITED STATES
    UKRAINE
}

type UsersSuccessfulResult {
    users: [User!]!
}

type UsersErrorResult {
    message: String!
}

union UsersResult = UsersSuccessfulResult | UsersErrorResult
